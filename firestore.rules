rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS collection
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // AI CHAT APP collection
    match /ai-chat-app/{chatId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // CALENDAR collection
    match /calendarEvents/{calendarEventsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // CHAT SESSIONS collection
    match /chatSessions/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // COURSES collection
    match /courses/{courseId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // LEADERBOARD collection
    match /leaderBoard/{leaderBoardId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // LEARNING LAB collection
    match /learningLab/{labId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // LEARNING SQUAD collection
    match /learningSquad/{squadId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow list: if request.auth != null;
    }

    // NOTES collection
    match /notes/{noteId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // PROJECTS collection
    match /projects/{projectId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // QUIZ ATTEMPTS collection
    match /quizAttempts/{attemptId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // QUIZ RESULTS collection
    match /quizResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // RECENT FILES collection
    match /recentFiles/{fileId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // ROADMAPS collection
    match /roadmaps/{roadmapsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // SAT TEST RESULTS collection
    match /satTestResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }

    // SQUADS collection
    match /squads/{squadId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;

      // âœ… Allow read only if user is owner or in members array
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.ownerId ||
        (resource.data.members is list && resource.data.members.hasAny([request.auth.uid]))
      );

      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      allow update: if request.auth != null && (
        // Owner can update anything
        request.auth.uid == resource.data.ownerId ||

        // User can join by adding self to members only, no other fields changed
        (
          resource.data.members is list &&
          request.resource.data.members is list &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['members']) &&
          !(resource.data.members.hasAny([request.auth.uid])) &&
          request.resource.data.members.hasAll(resource.data.members) &&
          request.resource.data.members.hasAny([request.auth.uid])
        )
      );

      allow list: if request.auth != null;
    }

    // TODO collection
    match /toDo/{toDoId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null;
    }
  }
}