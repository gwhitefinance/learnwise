rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth != null;
    }

    // Generic rule for user-owned collections
    function userOwnedCollectionRules() {
      return {
        // A user can query for their own documents
        allow list: if isOwner(request.query.filters.userId),

        // A user can create a document if they are the owner
        allow create: if isOwner(request.resource.data.userId),

        // A user can get, update, or delete their own document
        allow get, update, delete: if isOwner(resource.data.userId)
      }
    }
    
    // Apply rules to all user-specific collections
    match /chatSessions/{docId} {
      allow read, write: if isOwner(request.auth.uid);
    }
    
    match /courses/{docId} {
        allow read, write: if isOwner(request.auth.uid);
    }
    
    match /calendarEvents/{docId} {
       allow read, write: if isOwner(request.auth.uid);
    }

    match /notes/{docId} {
       allow read, write: if isOwner(request.auth.uid);
    }

    match /projects/{docId} {
       allow read, write: if isOwner(request.auth.uid);
    }

    match /recentFiles/{docId} {
       allow read, write: if isOwner(request.auth.uid);
    }
    
    match /roadmaps/{docId} {
       allow read, write: if isOwner(request.auth.uid);
    }
  }
}
