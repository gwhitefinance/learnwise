
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // A user can read and write to their own user document
      allow read, write: if isOwner(userId);
      // Anyone authenticated can create their own user record
      allow create: if isOwner(userId);
    }

    match /chatSessions/{docId} {
      // Users can only query for their own chat sessions
      allow list: if isOwner(request.query.filters.userId);
      // Users can only get their own chat sessions
      allow get: if isOwner(get(/databases/$(database)/documents/chatSessions/$(docId)).data.userId);
      // Users can only create chat sessions for themselves
      allow create: if isOwner(request.resource.data.userId);
      // Users can only update or delete their own chat sessions
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    match /courses/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/courses/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /calendarEvents/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/calendarEvents/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /notes/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/notes/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /projects/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/projects/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }

    match /recentFiles/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/recentFiles/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    match /roadmaps/{docId} {
      allow list: if isOwner(request.query.filters.userId);
      allow get: if isOwner(get(/databases/$(database)/documents/roadmaps/$(docId)).data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}
