rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isUserInSquad(squadId, userId) {
      return get(/databases/$(database)/documents/squads/$(squadId)).data.members.hasAny([userId]);
    }
    
    function isAddingSelf(request, resource) {
        let diff = request.resource.data.members.toSet().difference(resource.data.members.toSet());
        return diff.size() == 1 && diff.hasAny([request.auth.uid]);
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null;
    }

    match /courses/{courseId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /chatSessions/{sessionId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /notes/{noteId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /projects/{projectId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }
    
     match /recentFiles/{fileId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /calendarEvents/{eventId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }
    
    match /quizAttempts/{attemptId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /roadmaps/{roadmapId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /quizResults/{resultId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /satTestResults/{resultId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow list: if request.auth != null && request.query.where('userId', '==', request.auth.uid).exists();
    }

    match /squads/{squadId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
        allow read: if request.auth != null;
        allow update: if request.auth != null && (request.auth.uid == resource.data.ownerId || isAddingSelf(request, resource));
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
        allow list: if request.auth != null && request.query.where('members', 'array-contains', request.auth.uid).exists();
    }
  }
}
