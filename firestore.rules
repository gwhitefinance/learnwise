rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a member of a specific squad
    function isSquadMember(squadId, userId) {
      return get(/databases/$(database)/documents/squads/$(squadId)).data.members.hasAny([userId]);
    }

    // Helper function to check if two users share any squad
    function doUsersShareSquad(userId1, userId2) {
      // Get all squads for the first user
      let squads1 = get(/databases/$(database)/documents/users/$(userId1)).data.squads;

      // If squads1 is not a list or is empty, return false
      if (!(squads1 is list) || squads1.size() == 0) {
        return false;
      }
      
      // Get all squads for the second user
      let squads2 = get(/databases/$(database)/documents/users/$(userId2)).data.squads;

      // If squads2 is not a list or is empty, return false
      if (!(squads2 is list) || squads2.size() == 0) {
        return false;
      }

      // Return true if there is any intersection between the two lists of squads
      return squads1.hasAny(squads2);
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated() && (request.auth.uid == userId || doUsersShareSquad(request.auth.uid, userId));
      allow write: if isUserAuthenticated() && request.auth.uid == userId;
    }

    match /squads/{squadId} {
      allow read: if isUserAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.ownerId;
      allow update: if isUserAuthenticated() && 
                    (request.auth.uid == resource.data.ownerId || 
                    (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && 
                     request.resource.data.members.toSet().diff(resource.data.members.toSet()).addedKeys().hasOnly([request.auth.uid]) &&
                     !resource.data.members.hasAny([request.auth.uid])));
      allow delete: if isUserAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    match /courses/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /chatSessions/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /notes/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /projects/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /recentFiles/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
     match /calendarEvents/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /quizAttempts/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
     match /quizResults/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
     match /roadmaps/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /satTestResults/{document=**} {
      allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}
