
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    //
    // The `users` collection is a mirror of the Firebase Auth users, and should be
    // created and updated by a backend process. The client should only be able
    // to read their own user document.
    //
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /roadmaps/{roadmapId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /projects/{projectId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /recentFiles/{fileId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /notes/{noteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /quizAttempts/{attemptId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /quizResults/{resultId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /calendarEvents/{eventId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /squads/{squadId} {
        allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
        allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
        allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
        allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

        match /memberDetails/{memberId} {
            allow read: if request.auth != null && exists(/databases/$(database)/documents/squads/$(squadId)) && resource.data.members.hasAny([request.auth.uid]);
            allow write: if request.auth != null && (request.auth.uid == memberId || exists(/databases/$(database)/documents/squads/$(squadId)) && resource.data.ownerId == request.auth.uid);
        }

        match /projects/{projectId} {
            allow read: if request.auth != null && exists(/databases/$(database)/documents/squads/$(squadId)) && resource.data.members.hasAny([request.auth.uid]);
            allow write: if request.auth != null && exists(/databases/$(database)/documents/squads/$(squadId)) && resource.data.members.hasAny([request.auth.uid]);
        }
    }

    match /chatSessions/{sessionId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid || resource.data.isPublic == true;
      allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /satTestResults/{resultId} {
        allow read: if request.auth != null && resource.data.userId == request.auth.uid;
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

  }
}
