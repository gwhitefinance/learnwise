rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSquadMember(squadId) {
      return get(/databases/$(database)/documents/squads/$(squadId)).data.members.has(request.auth.uid);
    }
    
    // USERS - Each user can only access their own document, unless they are in a squad together.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || exists(/databases/$(database)/documents/squads) && get(/databases/$(database)/documents/squads).data.members.has(userId));
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // AI CHAT APP collection
    match /ai-chat-app/{chatId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // CALENDAR collection
    match /calendarEvents/{calendarEventsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // CHAT SESSIONS collection
    match /chatSessions/{sessionId} {
      // Publicly readable if isPublic is true
      allow get: if resource.data.isPublic == true;
      allow read, update, delete, create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // COURSES collection
    match /courses/{courseId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // LEADERBOARD collection
    match /leaderBoard/{leaderBoardId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // LEARNING LAB collection
    match /learningLab/{labId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // NOTES collection
    match /notes/{noteId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // PROJECTS collection
    match /projects/{projectId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // QUIZ ATTEMPTS collection
    match /quizAttempts/{attemptId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // QUIZ RESULTS collection
    match /quizResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // RECENTFILES collection
    match /recentFiles/{fileId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // ROADMAPS collection
    match /roadmaps/{roadmapsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // ✅ SAT TEST RESULTS collection
    match /satTestResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // ✅ SQUADS collection
    match /squads/{squadId} {
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      function isMember() {
        return request.auth.uid in resource.data.members;
      }
      
      function isAddingSelf() {
        let diff = request.resource.data.members.toSet().difference(resource.data.members.toSet());
        return diff.size() == 1 && diff.hasAny([request.auth.uid]);
      }

      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read: if isMember();
      allow list: if request.auth != null && request.query.where('members', 'array-contains', request.auth.uid).exists();
      allow update: if isOwner() || isAddingSelf();
    }

    // TODO collection
    match /toDo/{toDoId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }
  }
}