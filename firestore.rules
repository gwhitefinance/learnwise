rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS collection - Users can only read and write their own profile.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // SQUADS collection
    match /squads/{squadId} {
      // Any authenticated user can create a squad.
      allow create: if request.auth != null;

      // Allow a user to read a squad if their UID is in the 'members' list.
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      
      // Allow a user to update a squad if they are a member.
      allow update: if request.auth != null && request.auth.uid in resource.data.members;

      // Only the owner can delete the squad.
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

      // Any authenticated user can list squads, but the 'read' rule will secure the actual data access.
      allow list: if request.auth != null;

      // MEMBER DETAILS subcollection
      match /memberDetails/{memberId} {
        // Any member of the parent squad can read the public details of other members.
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/squads/$(squadId)).data.members;
        
        // A user can add or update their own details. Only owner can remove others.
        allow write: if request.auth != null && (
          request.auth.uid == memberId ||
          request.auth.uid == get(/databases/$(database)/documents/squads/$(squadId)).data.ownerId
        );
      }

      // PROJECTS subcollection
      match /projects/{projectId} {
        // Allow members to read and write individual project documents.
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/squads/$(squadId)).data.members;
        // Allow members to list the projects for the squad.
        allow list: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/squads/$(squadId)).data.members;
      }
    }

    // Other collections... (These are standard user-private rules)
    match /calendarEvents/{eventId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /chatSessions/{sessionId} {
      // Publicly shared chats can be read by anyone.
      allow read: if resource.data.isPublic == true || (request.auth != null && request.auth.uid == resource.data.userId);
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /courses/{courseId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /notes/{noteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /projects/{projectId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /quizAttempts/{attemptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /quizResults/{resultId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /recentFiles/{fileId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /roadmaps/{roadmapId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    match /satTestResults/{resultId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
