
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Public User Profiles
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId);
    }
    
    // Courses
    match /courses/{courseId} {
      // Anyone can read a course, but only the owner can create, update, or delete it.
      allow read;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId);

      // Subcollections for a course can follow the same ownership rules
      match /{allChildren=**} {
        allow read, write: if isSignedIn() && isOwner(get(/databases/$(database)/documents/courses/$(courseId)).data.userId);
      }
    }

    // Roadmaps
    match /roadmaps/{roadmapId} {
        allow read, create, update, delete: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    // Notes, Calendar Events, Projects, etc.
    match /{collection}/{docId} {
      // Generic rule: Allow full access if the document has a userId field matching the user.
      allow read, write: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Chat sessions can be read if public, otherwise only by the owner
    match /chatSessions/{sessionId} {
      allow read: if resource.data.isPublic == true || (isSignedIn() && isOwner(resource.data.userId));
      allow write: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Squads
    match /squads/{squadId} {
      allow read: if isSignedIn() && resource.data.members.hasAny([request.auth.uid]);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.ownerId) || resource.data.members.hasAny([request.auth.uid]));
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);

      // Members can be read by other members. Only owner can add/remove.
      match /memberDetails/{memberId} {
          allow read: if isSignedIn() && resource.data.members.hasAny([request.auth.uid]);
          allow write: if isSignedIn() && isOwner(get(/databases/$(database)/documents/squads/$(squadId)).data.ownerId);
      }
      
      match /projects/{projectId} {
         allow read, write: if isSignedIn() && get(/databases/$(database)/documents/squads/$(squadId)).data.members.hasAny([request.auth.uid]);
      }
    }
  }
}
