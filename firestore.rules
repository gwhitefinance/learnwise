rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to create courses for themselves
    // and allow anyone to read any course
    match /courses/{courseId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Allow users to create roadmaps for themselves
    // and allow anyone to read any roadmap
    match /roadmaps/{roadmapId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Allow users to read and write their own notes, projects, and calendar events
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /notes/{noteId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /projects/{projectId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /calendarEvents/{eventId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /quizAttempts/{attemptId} {
        allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /recentFiles/{fileId} {
        allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /quizResults/{resultId} {
        allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /chatSessions/{sessionId} {
        allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);
        allow write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /squads/{squadId} {
      allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid && request.resource.data.members.hasAll([request.auth.uid]);
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      match /memberDetails/{memberId} {
        allow read: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
        allow create, update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
      }
      
      match /projects/{projectId} {
        allow read, write: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
      }
    }
  }
}