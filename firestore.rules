
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isMember(squadId) {
      return request.auth.uid in get(/databases/$(database)/documents/squads/$(squadId)).data.members;
    }
    
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /squads/{squadId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isOwner(resource.data.ownerId) || 
                      (request.auth.uid in request.resource.data.members && !(request.auth.uid in resource.data.members));
      allow delete: if isOwner(resource.data.ownerId);
    }

    match /courses/{courseId} {
        allow read, write: if isUserAuthenticated() && (isOwner(resource.data.userId) || isMember(resource.data.squadId));
    }
    
    match /notes/{noteId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /projects/{projectId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /calendarEvents/{eventId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /recentFiles/{fileId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /quizAttempts/{attemptId} {
      allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /quizResults/{resultId} {
       allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /roadmaps/{roadmapId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
