rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Secure user-specific data
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if request.auth != null;
    }

    // Secure CHAT SESSIONS collection
    match /chatSessions/{chatId} {
      // Users can create a chat session if they are logged in and are the owner
      allow create: if isOwner(request.resource.data.userId);
      
      // Users can read, update, or delete their own chat sessions
      allow read, update, delete: if isOwner(resource.data.userId);
      
      // Users can list (query) their own chat sessions
      allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
    
    // Secure COURSES collection
    match /courses/{courseId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
    
    // Secure ROADMAPS collection
    match /roadmaps/{roadmapId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
    
    // Secure NOTES collection
    match /notes/{noteId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }

    // Secure PROJECTS collection
    match /projects/{projectId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }

    // Secure RECENT FILES collection
    match /recentFiles/{fileId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
    
    // Secure CALENDAR EVENTS collection
    match /calendarEvents/{eventId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
    
    // Secure QUIZ ATTEMPTS collection
    match /quizAttempts/{attemptId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update, delete: if isOwner(resource.data.userId);
        allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
    }
  }
}
