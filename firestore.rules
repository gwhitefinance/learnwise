
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS - Each user can only access their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // AI CHAT APP collection
    match /ai-chat-app/{chatId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // CALENDAR collection
    match /calendarEvents/{calendarEventsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // CHAT SESSIONS collection
    match /chatSessions/{sessionId} {
      // Publicly shared chats can be read by anyone
      allow get: if resource.data.isPublic == true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // COURSES collection
    match /courses/{courseId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // LEADERBOARD collection - allow read for anyone authenticated
    match /leaderBoard/{leaderBoardId} {
      allow read: if request.auth != null;
    }

    // LEARNING LAB collection
    match /learningLab/{labId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // NOTES collection
    match /notes/{noteId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // PROJECTS collection
    match /projects/{projectId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // QUIZ ATTEMPTS collection
    match /quizAttempts/{attemptId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // QUIZ RESULTS collection
    match /quizResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // RECENTFILES collection
    match /recentFiles/{fileId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // ROADMAPS collection
    match /roadmaps/{roadmapsId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // SAT TEST RESULTS collection
    match /satTestResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }

    // SQUADS collection
    match /squads/{squadId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      // Allow users to add themselves to the members list, but not change other fields
      allow update: if request.auth != null && (
                      (request.auth.uid == resource.data.ownerId) || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && 
                       request.resource.data.members == resource.data.members.concat([request.auth.uid]))
                    );
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow list: if request.auth != null 
                  && request.query.where('members', 'array-contains', request.auth.uid).exists();
    }

    // TODO collection
    match /toDo/{toDoId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow list: if request.auth != null 
                  && request.query.where('userId', '==', request.auth.uid).exists();
    }
  }
}
